class Client:
    def __init__(self, last_name, first_name, middle_name, address, phone):
        # Проверяем данные перед созданием клиента
        self.last_name = self.validate_string(last_name, "Фамилия")
        self.first_name = self.validate_string(first_name, "Имя")
        self.middle_name = self.validate_string(middle_name, "Отчество")
        self.address = self.validate_address(address)
        self.phone = self.validate_phone(phone)

    # Метод для проверки строковых данных
    def validate_string(self, value, field_name):
        if not value or not value.isalpha():
            raise ValueError(f"{field_name} должна содержать только буквы и не быть пустой")
        return value

    # Метод для проверки адреса
    def validate_address(self, address):
        if not address or len(address) < 5:
            raise ValueError("Адрес должен быть не менее 5 символов и не пустым")
        return address

    # Метод для проверки телефона
    def validate_phone(self, phone):
        if not phone or not phone.startswith("+") or not phone[1:].isdigit() or len(phone) < 10:
            raise ValueError("Телефон должен начинаться с '+' и содержать не менее 10 цифр")
        return phone

    # Метод для вывода информации о клиенте
    def show_info(self):
        print("Клиент:")
        print(f"ФИО: {self.last_name} {self.first_name} {self.middle_name}")
        print(f"Адрес: {self.address}")
        print(f"Телефон: {self.phone}")


# Пример использования
try:
    # Создаем клиента с правильными данными
    client = Client("Мироненко", "Максим", "Алексеевич", "г. Краснодар", "+79186543210")
    client.show_info()

    # Пробуем создать клиента с ошибкой
    invalid_client = Client("123", "Максим", "Алексеевич", "г. Краснодар", "+79186543210")
except ValueError as e:
    print("Ошибка:", e)
