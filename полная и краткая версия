import json


class Client:
    def __init__(self, last_name, first_name, middle_name, address, phone):
        self.last_name = self.validate_string(last_name, "Фамилия")
        self.first_name = self.validate_string(first_name, "Имя")
        self.middle_name = self.validate_string(middle_name, "Отчество")
        self.address = self.validate_address(address)
        self.phone = self.validate_phone(phone)

    @classmethod
    def from_csv(cls, csv_string):
        fields = csv_string.split(",")
        return cls(fields[0].strip(), fields[1].strip(), fields[2].strip(), fields[3].strip(), fields[4].strip())

    @classmethod
    def from_json(cls, json_string):
        try:
            data = json.loads(json_string)
        except json.JSONDecodeError:
            raise ValueError("Некорректный JSON формат")
        return cls(
            data.get("last_name", ""),
            data.get("first_name", ""),
            data.get("middle_name", ""),
            data.get("address", ""),
            data.get("phone", "")
        )

    def validate_string(self, value, field_name):
        if not value or not value.isalpha():
            raise ValueError(f"{field_name} должна содержать только буквы и не быть пустой")
        return value

    def validate_address(self, address):
        if not address or len(address) < 5:
            raise ValueError("Адрес должен быть не менее 5 символов и не пустым")
        return address

    def validate_phone(self, phone):
        if not phone or not phone.startswith("+") or not phone[1:].isdigit() or len(phone) < 10:
            raise ValueError("Телефон должен начинаться с '+' и содержать не менее 10 цифр")
        return phone

    # Полная версия объекта
    def show_full(self):
        print("Полная информация о клиенте:")
        print(f"ФИО: {self.last_name} {self.first_name} {self.middle_name}")
        print(f"Адрес: {self.address}")
        print(f"Телефон: {self.phone}")

    # Краткая версия объекта
    def show_short(self):
        print("Краткая информация о клиенте:")
        print(f"ФИО: {self.last_name} {self.first_name} {self.middle_name}")
        print(f"Телефон: {self.phone}")

    # Сравнение объектов
    def __eq__(self, other):
        if not isinstance(other, Client):
            return False
        return (
            self.last_name == other.last_name and
            self.first_name == other.first_name and
            self.middle_name == other.middle_name and
            self.address == other.address and
            self.phone == other.phone
        )


# Пример использования
try:
    # Создаем клиента вручную
    client1 = Client("Мироненко", "Максим", "Алексеевич", "г. Краснодар", "+79284513781")

    # Создаем клиента из CSV
    csv_data = "Максименко, Никита, Сергеевич, г. Краснодар, +79284513781"
    client2 = Client.from_csv(csv_data)

    # Создаем клиента из JSON
    json_data = '{"last_name": "Мавлюкаев", "first_name": "Эльдар", "middle_name": "Рустамович", "address": "г. Сочи", "phone": "+79261234567"}'
    client3 = Client.from_json(json_data)

    # Вывод полной и краткой информации
    client1.show_full()
    client1.show_short()

    client2.show_full()
    client2.show_short()

    client3.show_full()
    client3.show_short()

    # Сравнение объектов
    print("Равны ли client1 и client2?", client1 == client2)  # False
    print("Равны ли client2 и client3?", client2 == client3)  # False
    print("Равны ли client1 и client1?", client1 == client1)  # True

except ValueError as e:
    print("Ошибка:", e)
